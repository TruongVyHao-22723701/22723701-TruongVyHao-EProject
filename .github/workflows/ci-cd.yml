name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  # üß™ Job 1: TEST
  test:
    name: üß™ Run Tests
    runs-on: ubuntu-latest

    services:
      mongodb:
        image: mongo:latest
        ports:
          - 27017:27017
        env:
          MONGO_INITDB_ROOT_USERNAME: root
          MONGO_INITDB_ROOT_PASSWORD: password
      rabbitmq:
        image: rabbitmq:3-management
        ports:
          - 5672:5672
          - 15672:15672

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      # C√†i dependencies cho t·ª´ng service
      - name: Install dependencies (auth)
        working-directory: ./auth
        run: npm install

      - name: Install dependencies (product)
        working-directory: ./product
        run: npm install

      - name: Install dependencies (order)
        working-directory: ./order
        run: npm install

      # Kh·ªüi ƒë·ªông Auth service ‚Äî KH√îNG c·∫ßn endpoint /health
      - name: Start Auth service
        working-directory: ./auth
        run: |
          echo "üöÄ Starting Auth Service on port 3000..."
          nohup npm start > auth.log 2>&1 &
          for i in {1..30}; do
            if nc -z localhost 3000; then
              echo "‚úÖ Auth service is ready"
              break
            fi
            echo "‚è≥ Waiting for Auth service to start..."
            sleep 2
          done

      # Ch·∫°y test Product
      - name: Run Product tests
        working-directory: ./product
        env:
          MONGODB_URI: mongodb://root:password@localhost:27017/test_db?authSource=admin
          RABBITMQ_URL: amqp://localhost:5672
          JWT_SECRET: test_secret_key
        run: npm test


  # üê≥ Job 2: BUILD & PUSH DOCKER
  build-and-push:
    name: üê≥ Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: test

    strategy:
      matrix:
        service: [auth, product, order, api-gateway]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push ${{ matrix.service }}
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/eproject-${{ matrix.service }}:latest
            ${{ secrets.DOCKER_USERNAME }}/eproject-${{ matrix.service }}:${{ github.sha }}
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/eproject-${{ matrix.service }}:latest
          cache-to: type=inline


  # üì¢ Job 3: NOTIFY
  notify:
    name: üì¢ Deployment Notification
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: Send summary message
        run: |
          echo "‚úÖ CI/CD pipeline completed successfully!"
          echo "üß™ Tests passed on branch: ${{ github.ref_name }}"
          echo "üê≥ Docker images pushed to Docker Hub: ${{ secrets.DOCKER_USERNAME }}/eproject-*"
          echo "üîñ Commit: ${{ github.sha }}"
